// src/data/metaAPI.js
import axios from 'axios';

// Meta API version - centralized for consistency
const META_API_VERSION = 'v22.0';

// Facebook SDK initialization
export const initFacebookSDK = () => {
  console.log('Initializing Facebook SDK with version:', META_API_VERSION);
  
  return new Promise((resolve) => {
    window.fbAsyncInit = function() {
      window.FB.init({
        appId: process.env.REACT_APP_FACEBOOK_APP_ID,
        cookie: true,
        xfbml: true,
        version: META_API_VERSION
      });
      console.log('Facebook SDK initialized with version:', META_API_VERSION);
      resolve(window.FB);
    };

    // Load the SDK asynchronously with correct version
    (function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      // Include the version number directly in the SDK URL
      const sdkUrl = `https://connect.facebook.net/en_US/sdk/v${META_API_VERSION.substring(1)}.js`;
      js.src = sdkUrl;
      console.log('Loading FB SDK with URL:', sdkUrl);
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
  });
};

// Authentication function with domain-specific redirect URI
export const login = () => {
  return new Promise((resolve, reject) => {
    // Determine which domain we're on to use the correct redirect URI
    const currentDomain = window.location.hostname;
    let redirectUri;
    
    if (currentDomain === 'localhost') {
      redirectUri = `http://${currentDomain}:${window.location.port}/dashboard`;
    } else if (currentDomain.includes('myaiadsmanager.com')) {
      redirectUri = 'https://myaiadsmanager.com/api/auth/callback/facebook';
    } else if (currentDomain.includes('campaign-dashboard-attilas-projects')) {
      redirectUri = 'https://campaign-dashboard-attilas-projects-ea2ebf76.vercel.app/api/auth/callback/facebook';
    } else {
      // Default to the topaz domain
      redirectUri = 'https://campaign-dashboard-topaz.vercel.app/api/auth/callback/facebook';
    }
    
    console.log('Using redirect URI:', redirectUri);
    
    window.FB.login(function(response) {
      if (response.authResponse) {
        console.log('Login successful, auth response:', response.authResponse);
        resolve(response.authResponse.accessToken);
      } else {
        console.error('Login failed or cancelled by user');
        reject(new Error('User cancelled login or did not fully authorize.'));
      }
    }, { 
      scope: 'ads_management,ads_read,business_management,pages_show_list',
      return_scopes: true,
      auth_type: 'rerequest',
      redirect_uri: redirectUri
    });
  });
};

// Fetch Ad Accounts
export const fetchAdAccounts = async (accessToken) => {
  try {
    const response = await axios.get(
      `https://graph.facebook.com/${META_API_VERSION}/me/adaccounts`,
      {
        params: {
          access_token: accessToken,
          fields: 'id,name,account_id,account_status',
          limit: 50
        }
      }
    );
    return response.data.data;
  } catch (error) {
    console.error('Error fetching ad accounts:', error);
    throw error;
  }
};

// Fetch Creative Performance
export const fetchCreativePerformance = async (accessToken, adAccountId, dateRange = 'last_30d') => {
  try {
    // First, get all ads for the account
    const adsResponse = await axios.get(
      `https://graph.facebook.com/${META_API_VERSION}/act_${adAccountId}/ads`,
      {
        params: {
          access_token: accessToken,
          fields: 'id,name,creative{id,thumbnail_url,effective_object_story_id}',
          limit: 100
        }
      }
    );

    // Extract creative IDs
    const ads = adsResponse.data.data;
    const creativeIds = ads
      .filter(ad => ad.creative)
      .map(ad => ad.creative.id);

    if (creativeIds.length === 0) {
      return [];
    }

    // Now get insights for these creatives
    const today = new Date();
    const thirtyDaysAgo = new Date(today);
    thirtyDaysAgo.setDate(today.getDate() - 30);
    
    const since = thirtyDaysAgo.toISOString().split('T')[0];
    const until = today.toISOString().split('T')[0];

    const batchRequests = [];
    
    // Split into batches of 50
    for (let i = 0; i < creativeIds.length; i += 50) {
      const batch = creativeIds.slice(i, i + 50);
      
      const insights = await axios.get(
        `https://graph.facebook.com/${META_API_VERSION}/act_${adAccountId}/insights`,
        {
          params: {
            access_token: accessToken,
            level: 'ad',
            fields: 'ad_id,spend,impressions,clicks,actions,cost_per_action_type',
            filtering: JSON.stringify([{
              field: 'ad.creative.id',
              operator: 'IN',
              value: batch
            }]),
            time_range: JSON.stringify({
              since,
              until
            }),
            limit: 500
          }
        }
      );
      
      batchRequests.push(...insights.data.data);
    }

    // Map insights back to creative information
    return batchRequests.map(insight => {
      const ad = ads.find(ad => ad.id === insight.ad_id);
      return {
        adId: insight.ad_id,
        adName: ad ? ad.name : 'Unknown',
        creativeId: ad && ad.creative ? ad.creative.id : 'Unknown',
        thumbnailUrl: ad && ad.creative ? ad.creative.thumbnail_url : null,
        spend: parseFloat(insight.spend || 0),
        impressions: parseInt(insight.impressions || 0, 10),
        clicks: parseInt(insight.clicks || 0, 10),
        ctr: insight.clicks && insight.impressions ? 
          (parseInt(insight.clicks, 10) / parseInt(insight.impressions, 10) * 100).toFixed(2) : 0,
        conversions: insight.actions ? 
          insight.actions.filter(action => action.action_type === 'purchase').reduce((sum, action) => sum + parseInt(action.value, 10), 0) : 0,
        cpa: insight.cost_per_action_type ? 
          insight.cost_per_action_type.find(item => item.action_type === 'purchase')?.value || 0 : 0,
        roas: (insight.actions && parseFloat(insight.spend)) ? 
          (insight.actions.filter(action => action.action_type === 'purchase')
            .reduce((sum, action) => sum + (parseFloat(action.value) || 0), 0) / parseFloat(insight.spend)).toFixed(2) : 0
      };
    });
  } catch (error) {
    console.error('Error fetching creative performance:', error);
    throw error;
  }
};

// Get creative details
export const fetchCreativeDetails = async (accessToken, creativeId) => {
  try {
    const response = await axios.get(
      `https://graph.facebook.com/${META_API_VERSION}/${creativeId}`,
      {
        params: {
          access_token: accessToken,
          fields: 'id,thumbnail_url,object_story_spec,effective_object_story_id,image_url,video_id'
        }
      }
    );
    return response.data;
  } catch (error) {
    console.error('Error fetching creative details:', error);
    throw error;
  }
};

// Log out
export const logout = () => {
  return new Promise((resolve) => {
    window.FB.logout(function(response) {
      resolve(response);
    });
  });
};